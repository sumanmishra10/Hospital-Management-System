import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Autogenerated {
  ArrayOfPageContentSetupGetDt? arrayOfPAGESetupGetDt;

  Autogenerated({this.arrayOfPAGESetupGetDt});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    arrayOfPAGESetupGetDt = json['ArrayOfPageContentSetupGet_dt'] != null
        ? ArrayOfPageContentSetupGetDt.fromJson(
            json['ArrayOfPageContentSetupGet_dt'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (arrayOfPAGESetupGetDt != null) {
      data['ArrayOfPageContentSetupGet_dt'] = arrayOfPAGESetupGetDt!.toJson();
    }
    return data;
  }
}

class ArrayOfPageContentSetupGetDt {
  List<Opttime>? refererSetupGetDt;

  ArrayOfPageContentSetupGetDt({this.refererSetupGetDt});

  ArrayOfPageContentSetupGetDt.fromJson(Map<String, dynamic> json) {
    refererSetupGetDt = <Opttime>[];
    if (json['RefererSetupGet_dt'] != null) {
      json['RefererSetupGet_dt'].forEach((v) {
        refererSetupGetDt!.add(Opttime.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (refererSetupGetDt != null) {
      data['RefererSetupGet_dt'] =
          refererSetupGetDt!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Opttime {
  int? sn;
  String? pageGroup;
  String? pageTitle;
  String? pageText;
  bool? published;

  Opttime(
      {this.sn, this.pageGroup, this.pageTitle, this.pageText, this.published});

  Opttime.fromJson(Map<String, dynamic> json) {
    sn = json['sn'];
    pageGroup = json['page_group'];
    pageTitle = json['page_title'];
    pageText = json['page_text'];
    published = json['published'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['sn'] = sn;
    data['page_group'] = pageGroup;
    data['page_title'] = pageTitle;
    data['page_text'] = pageText;
    data['published'] = published;
    return data;
  }
}

class OptTime extends StatelessWidget {
  const OptTime({Key? key});

  Future<List<Opttime>> fetchData() async {
    final response = await http.get(
        Uri.parse('https://bluecross.com.np/MediproWebApi/api/Pagecontent'));

    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      final List<Opttime> pageContents = data.map((item) {
        return Opttime(
          sn: item['sn'],
          pageGroup: item['page_group'],
          pageTitle: item['page_title'],
          pageText: item['page_text'],
          published: item['published'],
        );
      }).toList();
      return pageContents;
    } else {
      throw Exception('Failed to load data from the API');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Page Content Table'),
      ),
      body: FutureBuilder<List<Opttime>>(
        future: fetchData(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text('Error: ${snapshot.error}'),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Text('No data available'),
            );
          } else {
            return SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                columns: <DataColumn>[
                  DataColumn(
                    label: Text('SN'),
                  ),
                  DataColumn(
                    label: Text('Page Group'),
                  ),
                  DataColumn(
                    label: Text('Page Title'),
                  ),
                  DataColumn(
                    label: Text('Page Text'),
                  ),
                  DataColumn(
                    label: Text('Published'),
                  ),
                ],
                rows: snapshot.data!
                    .map(
                      (pageContent) => DataRow(
                        cells: <DataCell>[
                          DataCell(
                            Text(pageContent.sn?.toString() ?? 'N/A'),
                          ),
                          DataCell(
                            Text(pageContent.pageGroup ?? 'N/A'),
                          ),
                          DataCell(
                            Text(pageContent.pageTitle ?? 'N/A'),
                          ),
                          DataCell(
                            Text(pageContent.pageText ?? 'N/A'),
                          ),
                          DataCell(
                            Text(pageContent.published?.toString() ?? 'N/A'),
                          ),
                        ],
                      ),
                    )
                    .toList(),
              ),
            );
          }
        },
      ),
    );
  }
}
